local scriptToLoad = [[
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local RunService = game:GetService("RunService")
local random = Random.new()

local DEBUG = false
local tpAmt
local void = CFrame.new(0, -3.4028234663852886e+38, 0)
local teleporting

local function DebugInfo(mode, content, value)
    if not DEBUG then return end
    if mode == "warn" then
        warn("[NovaStealerTP DEBUG]:", content, value or "")
    elseif mode == "print" then
        print("[NovaStealerTP DEBUG]:", content, value or "")
    else
        warn("[NovaStealerTP DEBUG]: Invalid debug type.")
    end
end

local backpack = Player:WaitForChild("Backpack")
local char, humanoid, hrp

local function GetCharacter()
    return Player.Character or Player.CharacterAdded:Wait()
end

local function SetupCharacter()
    char = GetCharacter()
    humanoid = char:WaitForChild("Humanoid")
    hrp = char:WaitForChild("HumanoidRootPart")
    backpack = Player:WaitForChild("Backpack")
    DebugInfo("print", "Character setup completed for", Player.Name)
end

SetupCharacter()

Player.CharacterAdded:Connect(function()
    SetupCharacter()
end)

task.spawn(function()
    while true do
        local ping = Player:GetNetworkPing() * 1000
        tpAmt = math.clamp(math.floor(ping * 0.8), 10, 150)
        if DEBUG then
            DebugInfo("print", "Ping: " .. math.floor(ping) .. "ms |tpAmt:", tpAmt)
        end
        RunService.Heartbeat:Wait()
    end
end)

local function TP(position)
    if not teleporting then
        teleporting = true
        if typeof(position) == "CFrame" and hrp and hrp.Parent then
            hrp.CFrame = position + Vector3.new(
                random:NextNumber(-0.00005, 0.00005),
                random:NextNumber(-0.00005, 0.00005), 
                random:NextNumber(-0.00005, 0.00005)
            )
            RunService.Heartbeat:Wait()
        end
        teleporting = false
    else
        DebugInfo("warn", "You are already teleporting", "teleporting")
    end
end

local function FindDelivery()
    local plots = workspace:FindFirstChild("Plots")
    if not plots then
        DebugInfo("warn", "Plots folder not found in workspace", nil)
        return
    end
    for _, plot in pairs(plots:GetChildren()) do
        local sign = plot:FindFirstChild("PlotSign")
        if sign then
            local yourBase = sign:FindFirstChild("YourBase")
            if yourBase and yourBase.Enabled then
                local hitbox = plot:FindFirstChild("DeliveryHitbox")
                if hitbox and hitbox:IsA("BasePart") and hitbox.Size.Magnitude > 0 then
                    return hitbox
                end
            end
        end
    end
    DebugInfo("warn", "No valid DeliveryHitbox found", nil)
end

local function DeliverBrainrot(statusLabel)
    if not char or not hrp then
        statusLabel.Text = "Error: Character not loaded"
        statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        task.wait(2)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
        return
    end

    local function attemptDelivery()
        local hitbox = FindDelivery()
        if not hitbox then
            statusLabel.Text = "Error: DeliveryHitbox not found"
            statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
            TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
            task.wait(2)
            TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
            return false
        end

        DebugInfo("print", "DeliveryHitbox successfully found", hitbox)

        local randomOffset = Vector3.new(
            random:NextNumber(-0.3, 0.3),
            random:NextNumber(-0.7, -0.3),
            random:NextNumber(-0.3, 0.3)
        )
        local target = hitbox.CFrame * CFrame.new(randomOffset)
        
        statusLabel.Text = "Phase 1: Initial teleport..."
        statusLabel.TextColor3 = Color3.fromRGB(255, 165, 0)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        
        local iterations = math.max(tpAmt or 70, 100)
        for i = 1, iterations do
            TP(target)
            if i % 20 == 0 then
                statusLabel.Text = "Phase 1: " .. math.floor((i/iterations) * 100) .. "%"
                task.wait(0.01)
            end
        end
        
        statusLabel.Text = "Phase 2: Void teleport..."
        statusLabel.TextColor3 = Color3.fromRGB(255, 255, 0)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        
        for i = 1, 3 do
            TP(void)
            task.wait(random:NextNumber(0.05, 0.1))
        end
        
        statusLabel.Text = "Phase 3: Precision teleport..."
        statusLabel.TextColor3 = Color3.fromRGB(0, 255, 255)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        
        local precisionIterations = math.max(tpAmt / 4, 30)
        for i = 1, precisionIterations do
            TP(target)
            if i % 5 == 0 then
                statusLabel.Text = "Phase 3: " .. math.floor((i/precisionIterations) * 100) .. "%"
                task.wait(0.01)
            end
        end
        
        task.wait(0.3)
        local maxAttempts = 3
        local success = false
        for attempt = 1, maxAttempts do
            local distance = (hrp.Position - target.Position).Magnitude
            if distance <= 12 then
                success = true
                break
            elseif distance <= 20 then
                TP(hitbox.CFrame)
                task.wait(0.05)
            end
            if attempt < maxAttempts then
                statusLabel.Text = "Retry attempt " .. attempt .. "..."
                statusLabel.TextColor3 = Color3.fromRGB(255, 165, 0)
                TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
                for i = 1, 20 do
                    TP(target)
                end
                task.wait(0.1)
            end
        end
        return success, target
    end

    local function checkDeliverySuccess()
        task.wait(0.5)
        
        local deliverySuccess = false
        
        local hitbox = FindDelivery()
        if not hitbox then
            deliverySuccess = true
            DebugInfo("print", "Delivery success detected: Hitbox disappeared", "")
            return deliverySuccess
        end
        
        if hitbox then
            local distance = (hrp.Position - hitbox.Position).Magnitude
            if distance > 20 then
                deliverySuccess = true
                DebugInfo("print", "Delivery success detected: Player far from hitbox", distance)
                return deliverySuccess
            end
        end
        
        if hitbox then
            local distance = (hrp.Position - hitbox.Position).Magnitude
            if distance <= 7 then
                task.wait(0.5)
                local newHitbox = FindDelivery()
                if not newHitbox or (hrp.Position - newHitbox.Position).Magnitude > 10 then
                    deliverySuccess = true
                    DebugInfo("print", "Delivery success detected: Hitbox disappeared after close proximity", "")
                    return deliverySuccess
                end
            end
        end
        
        DebugInfo("print", "Delivery check result", deliverySuccess)
        return deliverySuccess
    end

    local maxDeliveryAttempts = 3
    local currentAttempt = 1
    local deliverySuccessful = false
    while currentAttempt <= maxDeliveryAttempts and not deliverySuccessful do
        statusLabel.Text = "🔄 Delivery Attempt " .. currentAttempt .. "/" .. maxDeliveryAttempts
        statusLabel.TextColor3 = Color3.fromRGB(255, 165, 0)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        if currentAttempt > 1 then
            task.wait(1)
        end
        local teleportSuccess, target = attemptDelivery()
        
        if teleportSuccess then
            statusLabel.Text = "✅ Teleport successful!Checking delivery..."
            statusLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
            TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
            
            deliverySuccessful = checkDeliverySuccess()
            
            if deliverySuccessful then
                statusLabel.Text = "🎉 Brainrot delivered successfully!"
                statusLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
                TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
                task.wait(3)
                TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
                return
            else
                local finalDistance = (hrp.Position - target.Position).Magnitude
                if finalDistance <= 15 then
                    statusLabel.Text = "🎉 Brainrot likely delivered! (Close proximity)"
                    statusLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
                    TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
                    task.wait(3)
                    TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
                    return
                else
                    statusLabel.Text = "⚠️ Teleport successful but delivery failed. Retrying..."
                    statusLabel.TextColor3 = Color3.fromRGB(255, 165, 0)
                    TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
                    task.wait(2)
                end
            end
        else
            statusLabel.Text = "❌ Teleport failed. Retrying..."
            statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
            TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
            task.wait(2)
        end
        
        currentAttempt += 1
        
        if currentAttempt <= maxDeliveryAttempts then
            task.wait(1)
        end
    end
    
    if not deliverySuccessful then
        statusLabel.Text = "💀 All delivery attempts failed after " .. maxDeliveryAttempts .. " tries"
        statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        task.wait(3)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
    end
end

local function TPNearestBase(statusLabel)
    local plotsFolder = workspace:FindFirstChild("Plots")
    if not plotsFolder then
        DebugInfo("warn", "Missing folder", "Plots")
        statusLabel.Text = "Error: Plots folder not found"
        statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        task.wait(2)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
        return
    end

    local closestBrainrot = nil
    local shortestDistance = math.huge

    for _, plot in pairs(plotsFolder:GetChildren()) do
        local plotSign = plot:FindFirstChild("PlotSign")
        if plotSign then
            local plotSignText = plotSign:FindFirstChild("SurfaceGui"):FindFirstChild("Frame"):FindFirstChild("TextLabel")
            if plotSignText and plotSignText.ContentText ~= "Empty Base" then
                local yourBase = plotSign:FindFirstChild("YourBase")
                if yourBase and not yourBase.Enabled then
                    local podiums = plot:FindFirstChild("AnimalPodiums")
                    if podiums then
                        for _, brainrot in pairs(podiums:GetChildren()) do
                            if brainrot:IsA("Model") and brainrot:FindFirstChild("Base"):FindFirstChild("Spawn") then
                                local brainrotSpawn = brainrot.Base.Spawn
                                local distance = (brainrotSpawn.Position - hrp.Position).Magnitude
                                if distance < shortestDistance then
                                    shortestDistance = distance
                                    closestBrainrot = brainrotSpawn
                                end
                            end
                        end
                    end
                end
            end
        end
    end

    if not closestBrainrot then
        DebugInfo("warn", "No valid podium found", nil)
        statusLabel.Text = "Error: No valid podium found"
        statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        task.wait(2)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
        return
    end

    DebugInfo("print", "Nearest podium found", closestBrainrot)

    local target = closestBrainrot.CFrame * CFrame.new(0, 1.5, 0)
    
    local i = 0
    while i < (tpAmt or 70) do
        TP(target)
        i += 1
    end
    
    for _ = 1, 2 do
        TP(void)
    end
    
    i = 0
    while i < (tpAmt / 16) do
        TP(target)
        i += 1
    end
    
    task.wait(1)

    local distance = (hrp.Position - target.Position).Magnitude
    if distance <= 15 then
        DebugInfo("print", "Teleport succeeded", distance)
        statusLabel.Text = "Teleport Succeeded!"
        statusLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
    else
        DebugInfo("warn", "Teleport failed", distance)
        statusLabel.Text = "Teleport Failed: Too far (" .. math.floor(distance) .. ")"
        statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
    end
    TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
    task.wait(2)
    TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
end

local function TweenSteal(statusLabel)
    local TELEPORT_ITERATIONS = 85
    local VOID_CFRAME = CFrame.new(0, -3e40, 0)
    local MIN_RANDOM_OFFSET = -0.0008
    local MAX_RANDOM_OFFSET = 0.0008
    local JITTER_RANGE = 0.0002

    local function executeStealthMovement(targetCF, steps)
        if not hrp or typeof(targetCF) ~= "CFrame" then
            DebugInfo("warn", "Invalid HRP or target CFrame", nil)
            return false
        end
        
        local currentPos = hrp.Position
        local targetPos = targetCF.Position
        local startTime = tick()

        for i = 1, steps do
            local progress = (tick() - startTime) / (steps * 0.02)
            progress = math.min(progress, 1)
            
            local curvedProgress = progress * progress * (3 - 2 * progress)
            
            local newPos = currentPos:Lerp(targetPos, curvedProgress)
            newPos += Vector3.new(
                random:NextNumber(-JITTER_RANGE, JITTER_RANGE),
                random:NextNumber(-JITTER_RANGE, JITTER_RANGE),
                random:NextNumber(-JITTER_RANGE, JITTER_RANGE)
            )

            hrp.CFrame = CFrame.new(newPos) * (hrp.CFrame - hrp.Position)
            
            local waitTime = random:NextNumber(0.005, 0.015)
            task.wait(waitTime)
        end
        return true
    end

    local function findDeliverySpot()
        for _, v in ipairs(workspace.Plots:GetDescendants()) do
            if v.Name == "DeliveryHitbox" and v.Parent:FindFirstChild("PlotSign") then
                if v.Parent.PlotSign:FindFirstChild("YourBase") and v.Parent.PlotSign.YourBase.Enabled then
                    return v
                end
            end
        end
        DebugInfo("warn", "No valid DeliveryHitbox found for TweenSteal", nil)
        return nil
    end

    local delivery = findDeliverySpot()
    if not delivery then
        statusLabel.Text = "Error: DeliveryHitbox not found"
        statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
        task.wait(2)
        TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
        return
    end

    DebugInfo("print", "DeliveryHitbox found for TweenSteal", delivery)

    local targetPos = delivery.CFrame * CFrame.new(0, random:NextInteger(-3, -1), 0)
    
    for _ = 1, 3 do
        task.spawn(function()
            local success = executeStealthMovement(targetPos, TELEPORT_ITERATIONS)
            if success then
                for _ = 1, 3 do
                    hrp.CFrame = VOID_CFRAME
                    task.wait(random:NextNumber(0.05, 0.1))
                    hrp.CFrame = targetPos
                    task.wait(random:NextNumber(0.05, 0.1))
                end
            end
            task.wait(random:NextNumber(0.1, 0.3))
        end)
    end

    task.wait(1)
    local distance = (hrp.Position - targetPos.Position).Magnitude
    if distance <= 30 then
        DebugInfo("print", "TweenSteal succeeded", distance)
        statusLabel.Text = "TweenSteal Succeeded!"
        statusLabel.TextColor3 = Color3.fromRGB(0, 255, 100)
    else
        DebugInfo("warn", "TweenSteal failed", distance)
        statusLabel.Text = "TweenSteal Failed: Too far (" .. math.floor(distance) .. ")"
        statusLabel.TextColor3 = Color3.fromRGB(255, 80, 80)
    end
    TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 0}):Play()
    task.wait(2)
    TweenService:Create(statusLabel, TweenInfo.new(0.3), {TextTransparency = 1}):Play()
end

-- INTERFAZ MEJORADA PARA MÓVIL
local ModernGui = Instance.new("ScreenGui")
ModernGui.Name = "NovaStealerMobileGui"
ModernGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
ModernGui.IgnoreGuiInset = true
ModernGui.DisplayOrder = 999
ModernGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

local ModernBlur = Instance.new("BlurEffect")
ModernBlur.Name = "NovaStealerMobileBlur"
ModernBlur.Size = 0
ModernBlur.Parent = workspace

-- Panel principal más pequeño para móvil
local MainPanel = Instance.new("Frame")
MainPanel.Parent = ModernGui
MainPanel.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
MainPanel.BackgroundTransparency = 0
MainPanel.BorderSizePixel = 0
MainPanel.AnchorPoint = Vector2.new(0.5, 0.5)
MainPanel.Position = UDim2.new(0.5, 0, 0.5, 0)
MainPanel.Size = UDim2.new(0, 250, 0, 180) -- Aún más pequeño para móvil
MainPanel.ClipsDescendants = true
MainPanel.ZIndex = 2

local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 20) -- Bordes más suaves
MainCorner.Parent = MainPanel

local MainStroke = Instance.new("UIStroke")
MainStroke.Thickness = 2 -- Borde más delgado
MainStroke.Color = Color3.fromRGB(255, 50, 50)
MainStroke.Transparency = 0.3
MainStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
MainStroke.Parent = MainPanel

-- Barra superior más compacta
local TopBar = Instance.new("Frame")
TopBar.Name = "TopBar"
TopBar.Parent = MainPanel
TopBar.BackgroundColor3 = Color3.fromRGB(255, 50, 50)
TopBar.BackgroundTransparency = 0
TopBar.BorderSizePixel = 0
TopBar.Size = UDim2.new(1, 0, 0, 30) -- Aún más pequeña
TopBar.ZIndex = 3

local TopBarCorner = Instance.new("UICorner")
TopBarCorner.CornerRadius = UDim.new(0, 20)
TopBarCorner.Parent = TopBar

local Title = Instance.new("TextLabel")
Title.Name = "Title"
Title.Parent = TopBar
Title.BackgroundTransparency = 1
Title.Size = UDim2.new(1, -70, 1, 0) -- Espacio para botones
Title.Position = UDim2.new(0, 15, 0, 0)
Title.Font = Enum.Font.GothamBold
Title.Text = "Nova Mobile" -- Título más corto
Title.TextColor3 = Color3.fromRGB(255, 255, 255)
Title.TextSize = 16 -- Fuente más pequeña
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.TextTransparency = 0
Title.ZIndex = 4

-- Botones de control más pequeños
local ButtonBar = Instance.new("Frame")
ButtonBar.Parent = TopBar
ButtonBar.BackgroundTransparency = 1
ButtonBar.Size = UDim2.new(0, 60, 1, 0)
ButtonBar.Position = UDim2.new(1, -60, 0, 0)
ButtonBar.ZIndex = 4

local MinBtn = Instance.new("TextButton")
MinBtn.Name = "MinBtn"
MinBtn.Parent = ButtonBar
MinBtn.AnchorPoint = Vector2.new(0.5, 0.5)
MinBtn.BackgroundTransparency = 1
MinBtn.Position = UDim2.new(0.5, -15, 0.5, 0)
MinBtn.Size = UDim2.new(0, 20, 0, 20) -- Más pequeño
MinBtn.Font = Enum.Font.GothamBold
MinBtn.Text = "_"
MinBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
MinBtn.TextSize = 16
MinBtn.ZIndex = 4
MinBtn.AutoButtonColor = false

local CloseBtn = Instance.new("TextButton")
CloseBtn.Name = "CloseBtn"
CloseBtn.Parent = ButtonBar
CloseBtn.AnchorPoint = Vector2.new(0.5, 0.5)
CloseBtn.BackgroundTransparency = 1
CloseBtn.Position = UDim2.new(0.5, 15, 0.5, 0)
CloseBtn.Size = UDim2.new(0, 20, 0, 20) -- Más pequeño
CloseBtn.Font = Enum.Font.GothamBold
CloseBtn.Text = "×"
CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseBtn.TextSize = 16
CloseBtn.ZIndex = 4
CloseBtn.AutoButtonColor = false

local ContentPanel = Instance.new("Frame")
ContentPanel.Name = "ContentPanel"
ContentPanel.Parent = MainPanel
ContentPanel.BackgroundTransparency = 0
ContentPanel.BackgroundColor3 = Color3.fromRGB(18, 18, 18)
ContentPanel.Position = UDim2.new(0, 0, 0, 30)
ContentPanel.Size = UDim2.new(1, 0, 1, -50) -- Ajustado
ContentPanel.ZIndex = 3

local List = Instance.new("UIListLayout")
List.Parent = ContentPanel
List.FillDirection = Enum.FillDirection.Vertical
List.HorizontalAlignment = Enum.HorizontalAlignment.Center
List.VerticalAlignment = Enum.VerticalAlignment.Top
List.Padding = UDim.new(0, 8) -- Menos padding

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Name = "StatusLabel"
StatusLabel.Parent = MainPanel
StatusLabel.BackgroundTransparency = 1
StatusLabel.Size = UDim2.new(1, -20, 0, 25) -- Más pequeño
StatusLabel.Position = UDim2.new(0, 10, 1, -30) -- Ajustado
StatusLabel.Font = Enum.Font.GothamMedium
StatusLabel.TextColor3 = Color3.fromRGB(255, 50, 50)
StatusLabel.TextSize = 12 -- Fuente más pequeña
StatusLabel.TextTransparency = 0.1
StatusLabel.Text = ""
StatusLabel.TextWrapped = true
StatusLabel.ZIndex = 5

local function createMobileButton(name, text, color, callback)
    local btn = Instance.new("TextButton")
    btn.Name = name
    btn.Size = UDim2.new(0, 220, 0, 35) -- Botones aún más pequeños
    btn.BackgroundColor3 = Color3.fromRGB(12, 12, 12)
    btn.BackgroundTransparency = 0.05
    btn.Font = Enum.Font.GothamBold
    btn.Text = text
    btn.TextColor3 = Color3.fromRGB(255, 255, 255) -- Texto blanco
    btn.TextSize = 14 -- Fuente más pequeña
    btn.TextWrapped = true
    btn.AutoButtonColor = false
    btn.ZIndex = 4
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12) -- Bordes más suaves
    corner.Parent = btn
    
    local stroke = Instance.new("UIStroke")
    stroke.Thickness = 1
    stroke.Color = Color3.fromRGB(255, 50, 50)
    stroke.Transparency = 0.5
    stroke.Parent = btn
    
    -- Efectos táctiles mejorados
    btn.MouseEnter:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            BackgroundTransparency = 0.2,
            TextColor3 = Color3.fromRGB(255, 100, 100)
        }):Play()
        TweenService:Create(stroke, TweenInfo.new(0.2), {Transparency = 0.2}):Play()
    end)
    
    btn.MouseLeave:Connect(function()
        TweenService:Create(btn, TweenInfo.new(0.2), {
            BackgroundTransparency = 0.05,
            TextColor3 = Color3.fromRGB(255, 255, 255)
        }):Play()
        TweenService:Create(stroke, TweenInfo.new(0.2), {Transparency = 0.5}):Play()
    end)
    
    btn.MouseButton1Click:Connect(callback)
    return btn
end

-- Crear botones móviles
local InstantStealBtn = createMobileButton(
    "InstantStealBtn",
    "🚀 Instant Steal",
    Color3.fromRGB(255, 50, 50),
    function()
        DebugInfo("print", "Delivery button clicked", "")
        DeliverBrainrot(StatusLabel)
    end
)
InstantStealBtn.Parent = ContentPanel

local BaseBtn = createMobileButton(
    "BaseBtn",
    "🏠 Teleport Base",
    Color3.fromRGB(255, 50, 50),
    function()
        DebugInfo("print", "Base button clicked", "")
        TPNearestBase(StatusLabel)
    end
)
BaseBtn.Parent = ContentPanel

local NoClipBtn = createMobileButton(
    "NoClipBtn",
    "👻 NoClip Teleport",
    Color3.fromRGB(255, 50, 50),
    function()
        DebugInfo("print", "TweenSteal button clicked", "")
        TweenSteal(StatusLabel)
    end
)
NoClipBtn.Parent = ContentPanel

-- Animación de entrada mejorada
MainPanel.Size = UDim2.new(0, 0, 0, 0)
MainPanel.BackgroundTransparency = 1
ModernBlur.Size = 0

TweenService:Create(ModernBlur, TweenInfo.new(0.6, Enum.EasingStyle.Quint), {Size = 15}):Play()
TweenService:Create(MainPanel, TweenInfo.new(0.6, Enum.EasingStyle.Back, Enum.EasingDirection.Out), {
    Size = UDim2.new(0, 250, 0, 180),
    BackgroundTransparency = 0
}):Play()

-- Control de minimizar
local isMinimized = false
local originalSize = UDim2.new(0, 250, 0, 180)
local minimizedSize = UDim2.new(0, 125, 0, 30)

MinBtn.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    local targetSize = isMinimized and minimizedSize or originalSize
    TweenService:Create(MainPanel, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {
        Size = targetSize
    }):Play()
    ContentPanel.Visible = not isMinimized
    StatusLabel.Visible = not isMinimized
end)

CloseBtn.MouseButton1Click:Connect(function()
    TweenService:Create(MainPanel, TweenInfo.new(0.4, Enum.EasingStyle.Quint), {
        Size = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1
    }):Play()
    TweenService:Create(ModernBlur, TweenInfo.new(0.4), {Size = 0}):Play()
    task.wait(0.4)
    ModernGui:Destroy()
    ModernBlur:Destroy()
end)

-- Drag & Drop mejorado para móvil - TODA LA VENTANA ES MOVIBLE
local dragging = false
local dragInput, dragStart, startPos

-- Función para detectar toque en CUALQUIER parte de la ventana
local function handleTouchStart(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = MainPanel.Position
        
        -- Conectar el evento de fin de toque
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end

-- Función para manejar el movimiento del toque
local function handleTouchMoved(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end

-- Conectar eventos a TODA LA VENTANA (MainPanel) en lugar de solo TopBar
MainPanel.InputBegan:Connect(handleTouchStart)
MainPanel.InputChanged:Connect(handleTouchMoved)

UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        local goal = UDim2.new(
            startPos.X.Scale,
            startPos.X.Offset + delta.X,
            startPos.Y.Scale,
            startPos.Y.Offset + delta.Y
        )
        MainPanel:TweenPosition(goal, Enum.EasingDirection.Out, Enum.EasingStyle.Sine, 0.05, true)
    end
end)

-- Deshabilitar el drag en los botones para evitar conflictos
local function disableDragOnButtons()
    for _, child in pairs(MainPanel:GetDescendants()) do
        if child:IsA("TextButton") then
            child.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
                    -- Detener el drag cuando se toca un botón
                    dragging = false
                end
            end)
        end
    end
end

-- Ejecutar después de crear todos los botones
task.spawn(function()
    task.wait(0.1) -- Esperar a que se creen todos los elementos
    disableDragOnButtons()
end)

-- Botón flotante eliminado - interfaz más limpia

DebugInfo("print", "NovaStealerMobileGui initialization completed", "")
]]

-- Ejecutar el script
loadstring(scriptToLoad)()
